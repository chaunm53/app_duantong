// packages/ci-tools/scripts/validate-schemas.mjs
import { promises as fs } from 'node:fs';
import path from 'node:path';
import fg from 'fast-glob';

// ✅ Ajv 2020 cho draft 2020-12 (Node 22 cần đuôi .js)
import Ajv2020 from 'ajv/dist/2020.js';
import addFormats from 'ajv-formats';

const SERVICES_DIR = path.join(process.cwd(), 'services');

// Ajv 2020 đã có meta 2020-12, KHÔNG cần addMetaSchema thủ công
const ajv = new Ajv2020({
  allErrors: true,
  strict: false,
  // (tuỳ chọn) nếu bạn muốn bắt lỗi format kỹ hơn:
  // validateFormats: 'full'
});
addFormats(ajv);

function fail(msg) { console.error(`❌ ${msg}`); process.exitCode = 1; }

async function run() {
  const files = await fg(['**/contracts/json-schema/**/*.json'], {
    cwd: SERVICES_DIR, absolute: true
  });

  const ids = new Map();
  let count = 0;

  for (const file of files) {
    const raw = await fs.readFile(file, 'utf8');
    let json;
    try { json = JSON.parse(raw); }
    catch (e) { fail(`Invalid JSON in ${file}: ${e.message}`); continue; }

    if (!json.$schema) fail(`Missing $schema in ${file}`);
    if (!json.title)  fail(`Missing title in ${file}`);

    if (json.$id) {
      if (ids.has(json.$id)) fail(`Duplicate $id ${json.$id} (also in ${ids.get(json.$id)})`);
      else ids.set(json.$id, file);
    }

    try { ajv.compile(json); }
    catch (e) { fail(`Schema compile error in ${file}: ${e.message}`); }

    count++;
  }

  if (process.exitCode) {
    console.error('Schema validation completed with errors.');
    process.exit(process.exitCode);
  } else {
    console.log(`✅ Schemas OK: ${count} files validated.`);
  }
}

run().catch(e => { console.error(e); process.exit(1); });